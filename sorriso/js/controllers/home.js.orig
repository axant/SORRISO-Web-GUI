;
(function (win) {
    class HomeController {
        constructor() {
            this.get_instant_data();
            this.lucciola_widget = new HomeWidget({data:{
                id: 'lucciola',
                name: 'STORAGE LUCCIOLA',
                icon: 'home/storage.png',
                progress_type: 'Line'
            }});
            this.consumption_widget = new HomeWidget({data: {
                id: 'house-consumption',
                name: 'CONSUMI',
                icon: 'home/consumi.png'
            }});
            this.production_widget = new HomeWidget({data: {
                id: 'solar-production',
                name: 'PRODUZIONE FOTOVOLTAICO',
                icon: 'home/produzione.png'
            }});
            this.energy_widget = new HomeWidget({data: {
                id: 'sold-energy',
                name:' ENERGIA CEDUTA ALLA RETE',
                icon: 'home/energia.png'
            }});
            this.weekly_consumption = new ValueBoxWidget({el: 'home-weekly-consume', data: {unit: '%'}});
            this.weekly_expense = new ValueBoxWidget({el: 'home-weekly-expense', data: {unit: '€'}});
            this.weekly_chart = new TwoAreasChartWidget({el: 'home-solar-graph', data: {
                area1: {name: 'Previsione', values: [], color: 'rgba(243, 120, 14, 0.7)'},
                area2: {name: 'Produzione effettiva', values:[], color: 'rgba(34, 8, 45, 0.7)'}
            }});
        }

        get_instant_data() {
            sorriso.DAL.get_pvmeter_data()
                .then(response => {
                    this.consumption_widget.set('value', response.consumption);
                    this.production_widget.set('value', response.production);
                    this.lucciola_widget.set('value', response.lucciola);
                    this.energy_widget.set('value', response.energy);
                })
                .then(() => {
                    return sorriso.DAL.get_weekly_consume().then(resp => {
                        this.weekly_consumption.set('value', resp.value);
                    });
                })
                .then(() => {
                    return sorriso.DAL.get_weekly_expense().then(resp => {
                        this.weekly_expense.set('value', resp.value);
                    });
                })
                .then(() => {
                    return sorriso.DAL.get_weekly_prevision_comparison().then(resp => {
                        this.weekly_chart.set('area1.values', resp.prevision);
                        this.weekly_chart.set('area2.values', resp.actual);
                    });
                })
                .then(() => {
                    sorriso.loadCompleted();
                    setTimeout(() => { this.get_instant_data() }, sorriso.caches.MEDIUM_TERM_EXPIRATION);
                })
        }
    }

    var ValueBoxWidget = Ractive.extend({
        template: '<span class="valuebox-value">{{value}}</span><span class="valuebox-unit">{{unit}}</span>',
        data: {
            value: '-',
            unit: '?'
        }
    });

    var TwoAreasChartWidget = Ractive.extend({
        template: `
    <div decorator="areachart:{{area1.color}},{{area1.name}},{{area1.values}},{{area2.color}},{{area2.name}},{{area2.values}}"></div>
    <div class="chart-legend">
        <div><span style="background-color: {{area1.color}};">&nbsp;</span>{{area1.name}}</div>
        <div><span style="background-color: {{area2.color}};">&nbsp;</span>{{area2.name}}</div>
    </div>
        `,
        data: {
            area1: {
                name: '',
                values: [],
                color: 'red'
            },
            area2: {
                name: '',
                values: [],
                color: 'green'
            }
        },
        decorators: {
            areachart: function(node, area1_color, area1_name, area1, area2_color, area2_name, area2) {
                let chart_types = {};
                chart_types[area1_name] = 'area-spline';
                chart_types[area2_name] = 'area-spline';

                let area1_values = [area1_name].concat(area1);
                let area2_values = [area2_name].concat(area2);

                var chart = c3.generate({
                    bindto: node,
                    data: {
                        columns: [
                            area1_values,
                            area2_values
                        ],
                        types: chart_types
                    },
                    color: {
                        pattern: [area1_color, area2_color]
                    },
                    legend: {
                        show: false
                    },
                    axis: {
                        y: {
                            max: 100,
                            padding: { top: 1 },
                            tick: {
                                values: [0, 100]
                            }
                        },
                        x: {
                            tick: {
                                values: []
                            }
                        }
                    }
                });

                return {
                    update: function(__1, __2, area1, __3, __4, area2) {
                        let chart_types = {};
                        chart_types[area1_name] = 'area-spline';
                        chart_types[area2_name] = 'area-spline';

                        let area1_values = [area1_name].concat(area1);
                        let area2_values = [area2_name].concat(area2);

                        chart.load({
                            columns: [
                                area1_values,
                                area2_values
                            ],
                            unload: [area1_name, area2_name]
                        })
                    },
                    teardown: function() { chart.destroy(); }
                }
            }
        }
    });

    var HomeWidget = Ractive.extend({
        templateId: 'home-widget-template',
        el: '#home-diagram',
        append: true,
        onconstruct: function(options) {
            /* This is just to lazily load template only when we are in home page */
            if (document.getElementById(this.templateId) !== null)
                options.template = `#${this.templateId}`;
        },
        data: {
            id: null,
            icon: null,
            name: null,
            progress_type: 'Circle',
            value: {level: null, unit: null, percentage: 0}
        },
        decorators: {
            progress: function (node, percentage, progress_type) {
                var ProgressType = ProgressBar[progress_type];
                var options = {
                    color: '#FFA100',
                    strokeWidth: 7,
                    duration: 800,
                    easing: 'bounce'
                };

                if (progress_type === 'Circle')
                    options.svgStyle = { transform: 'rotate(180deg)',
                                         '-webkit-transform': 'rotate(180deg)'};
                else if (progress_type === 'Line')
                    options.svgStyle = { transform: 'rotate(270deg)',
                                         '-webkit-transform': 'rotate(270deg)'};

                var progress_circle = new ProgressType(node, options);
                progress_circle.animate(percentage/100);

                return {
                    update: function(percentage) {
                        progress_circle.animate(percentage/100);
                    },
                    teardown: function() {
                        progress_circle.destroy();
                    }
                };
            }
        }
    });

    win.HomeController = HomeController
})(window);